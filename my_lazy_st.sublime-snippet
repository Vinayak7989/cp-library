<snippet>
	<content><![CDATA[
struct segmentTree{
      int n;
      vector<int> st;
      vector<int> lazy;
      void init(int _n){
            this->n = _n;
            st.resize(4*n,0);
            lazy.resize(4*n,0);
      }
      void build(int start,int ending,int node,vector<int> &v){
            //base case
            if(start == ending){
                  st[node]= v[start];
                  return;
            }
            int mid= (start+ending)/2;
            build(start,mid,2*node+1,v);
            build(mid+1,ending,2*node+2,v);
            //backtracking
            st[node] = st[node*2 +1] + st[node*2 +2];

      }
      void build(vector<int> &v){
            build(0,n-1,0,v);
      }
      int query(int start,int ending,int l,int r,int node){
            if(start>r || ending<l) return 0;//non overlap
            //clear the lazy update
             if(lazy[node]!=0){
                        st[node] += lazy[node]*(ending-start+1);
                        if(start!=ending)
                        {
                              lazy[2*node+1] += lazy[node];
                              lazy[2*node+2] +=lazy[node];
                        }
                  }
            if(start>=l && ending<=r) {//complete overlap
                  return st[node];
            }
            int mid = (start+ending)/2; //partial overlap
            int q1= query(start,mid,l,r,2*node+1);
            int q2= query(mid+1,ending,l,r,2*node+2);
            return q1+q2;
      }
      int query(int l,int r){
            return query(0,n-1,l,r,0);
      }
      void update(int start,int ending,int node,int l,int r,int value){
           if(start>r || ending<l) return ;//non overlap
           //clearing the lazy tree
            if(lazy[node]!=0){
                        st[node] += lazy[node]*(ending-start+1);
                        if(start!=ending) // not a leaf node
                        {
                              lazy[2*node+1] += lazy[node];
                              lazy[2*node+2] +=lazy[node];
                        }
                  }
            if(start>=l && ending<=r){ //complete overlap
                  st[node]+= value*(ending-start+1);
                  if(start!=ending){
                        lazy[2*node+1] +=value;
                        lazy[2*node+2] += value;
                  }
                  return;
            }
            int mid=(start+ending)/2;//partial overlap go to its child
            update(start,mid,2*node+1,l,r,value);
            update(mid+1,ending,2*node+2,l,r,value);
            st[node]= st[2*node+1] + st[2*node+2];

      }
      void update(int l,int r,int val){
            update(0,n-1,0,l,r,val);
      }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>my_lazy_st</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
